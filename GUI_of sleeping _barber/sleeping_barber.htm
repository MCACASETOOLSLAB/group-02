<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Process Synchronization Using Sleeping Barber Problem</title>
<div id="page">
        <h1> Sleeping Barber</h1>
        <p>Consider a barber’s shop where there is only one barber, one 
barber chair and a number of waiting chairs for the customers. When 
there are no customers the barber sits on the barber chair and sleeps. 
When a customer arrives he awakes the barber or waits in one of the 
vacant chairs if the barber is cutting someone else’s hair. When all the
 chairs are full, the newly arrived customer simply leaves.</p>
    <p class="subtitle">Problems</p>
	<ul>
		<li>There might be a scenario in which the customer ends up waiting on
 a barber and a barber waiting on the customer, which would result to a 
deadlock.</li>
		<li>Then there might also be a case of starvation when the customers 
don’t follow an order to cut hair, as some people won’t get a hair cut 
even though they had been waiting long.</li>
	</ul>
    <p class="subtitle">Use of Semaphores</p>
    <p>The solution to these problems involves the use of three semaphores out of which one is a mutex (binary semaphore). They are:</p>
	<ul>
		<li><span class="code">Customers</span>: Helps count the waiting customers.</li>
		<li><span class="code">Barber</span>: To check the status of the barber, if he is idle or not.</li>
		<li><span class="code">accessSeats</span>: A mutex which allows the 
customers to get exclusive access to the number of free seats and allows
 them to increase or decrease the number.</li>
		<li><span class="code">NumberOfFreeSeats</span>: To keep the count of 
the available seats, so that the customer can either decide to wait if 
there is a seat free or leave if there are none.</li>
	</ul>
    <p class="subtitle">The Procedure</p>
	<ul>
		<li>When the barber first comes to the shop, he looks out for any customers i.e. calls <span class="code">P(Customers)</span>, if there are none he goes to sleep.</li>
		<li>Now when a customer arrives, the customer tries to get access to the accessSeats mutex i.e. he calls <span class="code">P(accessSeats)</span>, thereby setting a lock.</li>
		<li>If no free seat (barber chair and waiting chairs) is available he releases the lock i.e. does a <span class="code">V(accessSeats)</span> and leaves the shop.</li>
		<li>If there is a free seat he first decreases the number of free seats by one and he calls <span class="code">V(Customers)</span> to notify the barber that he wants to cut.</li>
		<li>Then the customer releases the lock on the <span class="code">accessSeats</span> mutex by calling <span class="code">V(accessSeats)</span>.</li>
		<li>Meanwhile when <span class="code">V(Customers)</span> was called the barber awakes.</li>
		<li>The barber locks the <span class="code">accessSeats</span> mutex 
as he wants to increase the number of free seats available, as the just 
arrived customer may sit on the barber’s chair if that is free.</li>
		<li>Now the barber releases the lock on the <span class="code">accessSeats</span> mutex so that other customers can access it to the see the status of the free seats.</li>
		<li>The barber now calls a <span class="code">V(Barber)</span>, i.e. he tells the customer that he is available to cut.</li>
		<li>The customer now calls a <span class="code">P(Barber)</span>, i.e. he tries to get exclusive access of the barber to cut his hair.</li>
		<li>The customer gets a haircut from the barber and as soon as he is 
done, the barber goes back to sleep if there are no customers or waits 
for the next customer to alert him.</li>
		<li>When another customer arrives, he repeats the above procedure again.</li>
		<li>If the barber is busy then the customer decides to wait on one of the free waiting seats.</li>
		<li>If there are no customers, then the barber goes back to sleep.</li>
	</ul>
    
	<p class="subtitle">Animation</p>
	<p>Please click START to begin.</p>
	<div align="center">
		<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,19,0" height="600" width="700">
			<param name="movie" value="barber_animation.swf">
			<param name="quality" value="high">
			<embed src="sleeping_barber/barber_animation.swf" quality="high" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" height="600" width="700">
		</object>
	</div>
	<p class="subtitle">Implementation</p>
	<p>The following pseudo-code guarantees synchronization between barber 
and customer and is deadlock free, but may lead to starvation of a 
customer.</p>
	<div class="codeblock">
		Customers = init(0)<br>
		Barber = init(0)<br>
		accessSeats = init(1) // mutex<br>
		NumberOfFreeSeats = N //total number of seats
	</div>
	<p>The Barber (Thread/Process)</p>
	<div class="codeblock">
		while (true) { // runs in an infinite loop<br>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;P(Customers) // tries to acquire a customer - if none is available<br>
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;he
 goes to sleep<br>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;P(accessSeats) // at this time he has been awaken - want to modify<br>
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the
 number of available seats<br>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;NumberOfFreeSeats++ // one chair gets free<br>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;V(Barber) // the barber is ready to cut<br>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;V(accessSeats) // we don't need the lock on the chairs anymore<br>
        
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
 here the barber is cutting hair<br>
		<br>
		}
	</div>
	<p>The Customer (Thread/Process)</p>
	<div class="codeblock">
		P(accessSeats) // tries to get access to the chairs<br>
		<br>
		if (NumberOfFreeSeats &gt; 0) { // if there are any free seats<br>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;NumberOfFreeSeats-- // sitting down on a chair<br>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;V(Customers) // notify the barber, that there is a customer waiting<br>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;V(accessSeats) // don't need to lock the chairs anymore<br>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;P(Barber) // now it's this customers turn, but wait if the barber is busy<br>
        
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
 here the customer is having his hair cut<br>
		<br>
		} else { // there are no free seats<br>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;// tough luck<br>
		<br>
		&nbsp;&nbsp;&nbsp;&nbsp;V(accessSeats) // but don't forget to release the lock on the seats<br>
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
 customer leaves without a haircut<br>
		}
	</div>
	<p>Note:  The solution can be modified so that the customers are made 
to form a queue as they arrive so that the barber can service these 
customers on a first come first served basis. This solves the problem of
 starvation where in a customer might have to wait long for his turn to 
come.</p>


</body></html>